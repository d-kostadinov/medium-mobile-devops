trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: group1 # Link the variable group
  - name: buildVariant
    value: 'dev' # Specify the build variant ('dev', 'qa', or 'prod')

stages:
  - stage: BuildAndDistribute
    displayName: 'Build and Distribute APK'
    jobs:
      - job: BuildAndUpload
        displayName: 'Build and Upload APK to Firebase'
        steps:
          - script: |
              echo "Determining the google-services.json file for build variant: $(buildVariant)"
              if [[ "$(buildVariant)" == "dev" ]]; then
                echo "google-services-dev.json" > google_services_file.txt
              elif [[ "$(buildVariant)" == "qa" ]]; then
                echo "google-services-qa.json" > google_services_file.txt
              elif [[ "$(buildVariant)" == "prod" ]]; then
                echo "google-services-prod.json" > google_services_file.txt
              else
                echo "google-services-dev.json" > google_services_file.txt
              fi
              cat google_services_file.txt
            displayName: 'Determine google-services.json File'

          - task: DownloadSecureFile@1
            displayName: 'Download google-services.json'
            inputs:
              secureFile: ${{ variables['google_services_file.txt'] }}

          - script: |
              echo "Moving google-services.json to the app directory"
              mv $(Agent.TempDirectory)/google-services.json app/google-services.json
            displayName: 'Move google-services.json to app directory'

          - task: DownloadSecureFile@1
            displayName: 'Download Firebase Service Account'
            inputs:
              secureFile: medium-devops-01-firebase-adminsdk-ibr0u-6a85363e42.json

          - script: |
              echo "Moving Firebase service account JSON to the app directory"
              mv $(Agent.TempDirectory)/medium-devops-01-firebase-adminsdk-ibr0u-6a85363e42.json app/firebase-service-account.json
            displayName: 'Inject Firebase Service Account JSON'

          - script: |
              echo "Building APK for $(buildVariant) variant"
              ./gradlew clean assemble$(buildVariant.capitalize())Debug
            displayName: 'Build APK'

          - script: |
              echo "Distributing APK to Firebase App Distribution"
              ./gradlew appDistributionUpload$(buildVariant.capitalize())Debug
            displayName: 'Distribute APK to Firebase'

          - script: |
              echo "Listing APK outputs"
              ls -la app/build/outputs/apk/$(buildVariant)/debug/
            displayName: 'Verify APK Output'
