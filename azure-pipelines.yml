trigger:
  - main

variables:
  - group: group1 # Link the variable group
  - name: buildVariant
    value: 'dev' # Use your specific build variant here
  - name: buildVariantCapitalized
    value: 'Dev' # Manually capitalize for consistency
  - name: firebaseServiceFile
    value: 'firebase-service-account.json'

jobs:
  - job: BuildAndUpload
    displayName: Build and Upload APK to Firebase
    pool:
      vmImage: 'ubuntu-22.04'

    steps:

      # Step: Check ANDROID_HOME
      - script: |
          echo "ANDROID_HOME: $ANDROID_HOME"
          ls $ANDROID_HOME
        displayName: Check ANDROID_HOME Environment Variable

      # Step: Verify sdkmanager Availability
      - script: |
          ls /usr/local/lib/android/sdk/cmdline-tools/latest/bin
          echo "PATH: $PATH"
        displayName: Verify sdkmanager Availability

      # Step 1: Explicit checkout configuration
      - task: Checkout@1
        inputs:
          repository: self

      # Step 2: Sync with GitHub (Force Override)
      - script: |
          git remote add github https://github.com/d-kostadinov/medium-mobile-devops.git
          git fetch github
          git checkout -b main || git checkout main # Create or switch to main branch
          git reset --hard github/main # Force reset to GitHub's main branch
          git push https://devdobrikostadinov:${AZURE_PAT}@dev.azure.com/devdobrikostadinov/medium.devops/_git/medium-mobile-devops.git --force
        displayName: 'Sync with GitHub (Force Override)'
        env:
          AZURE_PAT: $(AZURE_PAT)

      # Step 3: Install Java 17
      - script: |
          sudo apt update
          sudo apt install -y openjdk-17-jdk
          sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
          java -version
        displayName: 'Install and Set Java 17'

      # Step 4: Set JAVA_HOME
      - script: |
          echo "Setting JAVA_HOME..."
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          echo "JAVA_HOME is set to $JAVA_HOME"
        displayName: 'Set JAVA_HOME for Java 17'

      # Step 5: Verify JAVA_HOME
      - script: |
          echo "Verifying JAVA_HOME..."
          echo $JAVA_HOME
          java -version
        displayName: 'Verify JAVA_HOME'

      # Step 6: Download the correct google-services.json file
      - task: DownloadSecureFile@1
        displayName: Download google-services-dev.json
        condition: eq(variables['buildVariant'], 'dev')
        inputs:
          secureFile: google-services-dev.json

      - task: DownloadSecureFile@1
        displayName: Download google-services-qa.json
        condition: eq(variables['buildVariant'], 'qa')
        inputs:
          secureFile: google-services-qa.json

      - task: DownloadSecureFile@1
        displayName: Download google-services-prod.json
        condition: eq(variables['buildVariant'], 'prod')
        inputs:
          secureFile: google-services-prod.json

      # Step 7: Move the file to the correct location
      - script: |
          mv $(Agent.TempDirectory)/google-services-*.json $(System.DefaultWorkingDirectory)/app/google-services.json
        displayName: Move google-services.json to app directory

      - task: DownloadSecureFile@1
        displayName: Download Firebase Admin SDK JSON
        inputs:
          secureFile: firebase-service-account.json

      # Step: Copy the service account key to the working directory
      - script: |
          cp $(Agent.TempDirectory)/firebase-service-account.json $(System.DefaultWorkingDirectory)/firebase-service-account.json
        displayName: 'Copy Firebase service account key to the working directory'

      # Debugging: Verify google-services.json placement and content
      - script: |
          echo "Listing files in app directory:"
          ls $(System.DefaultWorkingDirectory)/app
          echo "Content of google-services.json:"
          cat $(System.DefaultWorkingDirectory)/app/google-services.json
        displayName: Verify google-services.json Placement and Content

      # Step 8: Build the APK
      - script: |
          ./gradlew assembleDevDebug
        displayName: Build APK
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64

      # Step 9: Install Android SDK Build Tools
      - script: |
          yes | sdkmanager --install "build-tools;34.0.0"
        displayName: Install Android SDK Build Tools

      # Step 10: Add Build Tools to PATH
      - script: |
          export PATH=$PATH:$ANDROID_HOME/build-tools/34.0.0
        displayName: Add Build Tools to PATH

      # Step 11: Verify APK Application ID
      - script: |
          echo "Verifying applicationId in the APK..."
          aapt dump badging app/build/outputs/apk/dev/debug/app-dev-debug.apk | grep package
        displayName: Verify APK Application ID

      # Step 9: Upload the APK to Firebase
      - script: |
          ./gradlew appDistributionUploadDevDebug
        displayName: Upload APK to Firebase
        env:
          JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
          GOOGLE_APPLICATION_CREDENTIALS: $(System.DefaultWorkingDirectory)/firebase-service-account.json
