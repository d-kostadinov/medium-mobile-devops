trigger:
  - main

variables:
  - group: group1 # Link the variable group
  - name: buildVariant
    value: 'dev' # Use your specific build variant here
  - name: buildVariantCapitalized
    value: 'Dev' # Manually capitalize for consistency
  - name: firebaseServiceFile
    value: 'medium-devops-01-firebase-adminsdk-ibr0u-6a85363e42.json'

pool:
  vmImage: 'ubuntu-22.04'

steps:
  # Step 1: Explicit checkout configuration
  - task: Checkout@1
    inputs:
      repository: self

  # Step 2: Sync with GitHub (Force Override)
  - script: |
      git remote add github https://github.com/d-kostadinov/medium-mobile-devops.git
      git fetch github
      git checkout -b main || git checkout main # Create or switch to main branch
      git reset --hard github/main # Force reset to GitHub's main branch
      git push https://devdobrikostadinov:${AZURE_PAT}@dev.azure.com/devdobrikostadinov/medium.devops/_git/medium-mobile-devops.git --force
    displayName: 'Sync with GitHub (Force Override)'
    env:
      AZURE_PAT: $(AZURE_PAT)

  # Step 3: Install Java 17
  - script: |
      sudo apt update
      sudo apt install -y openjdk-17-jdk
      sudo update-alternatives --set java /usr/lib/jvm/java-17-openjdk-amd64/bin/java
      java -version
    displayName: 'Install and Set Java 17'

  # Step 4: Set JAVA_HOME
  - script: |
      echo "Setting JAVA_HOME..."
      export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      echo "JAVA_HOME is set to $JAVA_HOME"
    displayName: 'Set JAVA_HOME for Java 17'

  # Step 5: Download secure files
  - task: DownloadSecureFile@1
    inputs:
      secureFile: '$(firebaseServiceFile)'
  - script: |
      echo "Moving Firebase service account JSON..."
      mv $(Agent.TempDirectory)/$(firebaseServiceFile) ./firebase-service-account.json
    displayName: 'Inject Firebase Service Account JSON'

  # Step 6: Build APK
  - script: |
      ./gradlew clean assemble$(buildVariantCapitalized)Debug
    displayName: 'Build APK'
    env:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64

  # Step 7: Verify build output directory
  - script: |
      echo "Listing contents of build directory:"
      ls -R app/build/outputs
    displayName: 'Verify Build Output Directory'

  # Step 8: Distribute to Firebase App Distribution
  - script: |
      APK_PATH="app/build/outputs/apk/$(buildVariant)/debug/app-$(buildVariant)-debug.apk"
      echo "Uploading APK: $APK_PATH"
      ./gradlew appDistributionUpload$(buildVariantCapitalized)Debug -PfirebaseServiceCredentialsFile=firebase-service-account.json -PdistributeApkPath=$APK_PATH
    displayName: 'Distribute APK to Firebase'
    env:
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
